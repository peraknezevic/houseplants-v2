// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role
  accounts      Account[]
  sessions      Session[]
  articles      Article[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Article {
  id        Int      @id @default(autoincrement())
  title     String   @unique
  slug      String   @unique
  content   String   @db.Text()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
  published Publish  @default(PUBLISHED)
}

model Page {
  id        Int     @id @default(autoincrement())
  title     String  @unique
  slug      String  @unique
  content   String  @db.Text()
  published Publish @default(PUBLISHED)
}

model GenusPage {
  id        Int     @id @default(autoincrement())
  title     String  @unique
  slug      String  @unique
  intro     String  @db.Text()
  changeLog String  @db.Text()
  plants    Plant[]
  published Publish @default(PUBLISHED)
}

model Plant {
  slug          String  @unique
  botanicalName String  @unique
  hasProfile    Boolean @default(false)

  isSpecies  Boolean @default(true)
  isCultivar Boolean @default(false)
  isHybrid   Boolean @default(false)

  children String[] @default([])
  parents  String[] @default([])

  genusPage     GenusPage @relation(fields: [genusPageSlug], references: [slug])
  genusPageSlug String

  synonyms    String?
  tradeNames  String?
  commonNames String?
  namedBy     String?
  inventor    String?
  patent      String?
  nativeArea  String?

  imageCredits String?
}

model PlantProfile {
  slug          String @unique
  botanicalName String @unique

  synonyms    String?
  namedBy     String?
  inventor    String?
  patent      String?
  tradeNames  String?
  commonNames String?
  family      String?
  subFamily   String?
  genus       String
  nativeArea  String?

  care          Care          @default(EASY)
  light         Light         @default(BRIGHT_LIGHT)
  watering      String
  soil          String
  soilPH        String
  humidity      Humidity      @default(MEDIUM)
  feeding       String
  minimalT      Int
  optimalT      Int
  speedOfGrowth SpeedOfGrowth @default(MODERATE)
  matureSize    String
  repotting     String
  flower        String
  propagation   String
  toxicity      Toxicity      @default(TOXIC)
  pests         String
  diseases      String
  imageCredits  String?
  notes         String?       @db.Text()

  published Publish @default(PUBLISHED)
}

enum Role {
  USER
  ADMIN
}

enum Care {
  EASY
  AVARAGE
  DIFFICULT
}

enum Light {
  LOW_LIGHT
  PARTIAL_SHADE
  MEDIUM_LIGHT
  BRIGHT_LIGHT
  FULL_SUN
}

enum Humidity {
  LOW
  MEDIUM
  HIGH
}

enum SpeedOfGrowth {
  SLOW
  MODERATE
  FAST
}

enum Toxicity {
  TOXIC
  NOT_TOXIC
  NO_INFO
}

enum Publish {
  PUBLISHED
  DRAFT
  REVIEW
}
